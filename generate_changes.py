#!/usr/bin/python

import sys
import os
import subprocess
from email.Utils import formatdate

TEMPLATE = """Format: 1.8
Date: {date}
Source: {Package}-source
Binary: {Package}
Architecture: {Architecture}
Version: {Version}
Distribution: {dist}
Urgency: low
Maintainer: {Maintainer}
Description: {Description}
Changes:
 {Package} ({Version}) ({dist}); urgency=low
 .
   * New release (autogenerated stub change line).
Checksums-Sha1:
 {sha1sum} {filesize} {filename}
Checksums-Sha256:
 {sha256sum} {filesize} {filename}
Files:
 {md5sum} {filesize} {Section} {Priority} {filename}

"""


def output(cmd):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, _ = p.communicate()
    if p.wait():
        raise OSError("command '%s' failed" % (cmd,))
    return stdout.rstrip()


def parse_properties(txt):
    key = val = None
    for line in txt.splitlines():
        assert line[0] == ' ', "malformed deb info?"
        if line[1].isupper():
            # new k-v pair, yeild the current one if it exists
            if key is not None:
                yield (key, val)
            key, val = line.strip().split(": ", 1)
        elif line[1] == ' ':
            # continuation of prev value
            if key is not None:
                val += "\n" + line.rstrip()
    # finally, yield the remaining pair
    if key is not None:
        yield (key, val)


def main():
    debfile = sys.argv[1]
    assert os.path.exists(debfile)
    dist = sys.argv[2]
    st = os.stat(debfile)
    props = {
        'date': formatdate(localtime=True),
        'filename': os.path.basename(debfile),
        'filesize': st.st_size,
        'dist': dist,
        'sha1sum': output("sha1sum '%s' | cut -d' ' -f1" % (debfile,)),
        'sha256sum': output("sha256sum '%s' | cut -d' ' -f1" % (debfile,)),
        'md5sum': output("md5sum '%s' | cut -d' ' -f1" % (debfile,)),
        'Section': 'non-free/net',
        'Priority': 'extra'
    }
    props.update(dict(parse_properties(output("dpkg-deb -I '%s'" % (debfile,)))))
    if len(sys.argv) > 3:
        file(sys.argv[3], 'wb').write(TEMPLATE.format(**props))
    else:
        print TEMPLATE.format(**props)

if __name__ == "__main__":
    main()

